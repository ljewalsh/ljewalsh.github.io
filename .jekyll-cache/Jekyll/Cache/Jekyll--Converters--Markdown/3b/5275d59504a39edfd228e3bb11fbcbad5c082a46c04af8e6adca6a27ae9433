I"|<p>Over five years ago, working as an archivist as the Univeristy of Canterbury, my manager linked me to the coding-tutorial website <a href="http://codecademy.com">codecademy</a> with a vague comment of “you might like this”. I still remember the homepage – a signup form with an embedded terminal next to it and a message employing me to write my first line of code: <i>print ‘hello world’</i>. Quickly I typed those three words, hit enter, and watched the terminal dutifly spitout my message:</p>

<center>hello world</center>

<p>I was hooked.</p>

<p>In the months that followed it became increasingly clear to me that I wanted to make software my job. Whenever I worked with code – whether that making my way through a tutorial, building a little project, or hacking things my team used – I lost all awareness of time. Hours passed by like minutes, lunchbreaks were missed, I found it hard to go home at the end of the day, sure that the solution to whatever problem I was working on was right around the corner. My job no longer felt like work. I loved what I was doing.</p>

<p>Over the next few years I managed to morph my archive job into a technical role but it wasn’t until 2017 that I was able to make the leap from an English grad with some technical skills to a real-life bonified software engineer. Often I think about those times, about the things I wish I had known that would have speed up the process of becoming a dev. Overtime I have curated and polished this list into something resembling tips for self-taught developers. I hope that these will be useful for other people looking to make the same journey.</p>

<!-- more -->

<h2>Use the same tools as devs</h2>

<p>If you’ve spent anytime around developers you will know that we love talking about tools. Like a painter knows their paint brushes, and a chef knows their knives, so too does a developer know their code editor, version control software, and database manager. Understanding these tools and how to discuss things about them goes a long way in an interview.</p>

<p>Obviously if you are not a developer you might not know what tools developers even use so I will be more specific with my recommendations:</p>

<ul>
<li><p>Learn how to use <a href="https://git-scm.com/">git</a> to store code locally and remotely on a hosting service such as <a href="https://github.com/">github</a> or <a href="https://bitbucket.org/">bitbucket</a></p>
<p>For the most part, all you need to know to get started is how to add, commit, and push code to a repository. But if possible I would also recommend learning how to resolve merge conflicts (when two people edit the same line of code and a decision has to be made about what changes should be kept). If necessary, checkout your code in two different places and resolve conflicts you have deliberately created so you can see how the merge conflict works.</p>
<p>When you are self taught, Github is like a business card for you, since you don't have work experience to backup your skills. Store your best work on there and direct people to it. That way they can see that you can code.</p>
</li>
<li>
<p>Use a code editor such as <a href="https://code.visualstudio.com/">VS Code</a> with debugging, syntax highlighting, and git support. Better yet, try out a number of different editors and find which you prefer. Not only will it make writing code so much easier, it will also give you something to talk about in your interviews. For bonus points, try out vim and add some basic customisation
</p>
</li>
<li>
<p>Learn how to use the terminal for basic tasks such as changing directory, searching for files, and renaming or moving files. As a developer, the terminal is one of your most powerful tools and at times the only access you may have to a machine.
</p>
</li>
<li>
<p>
Play around with the developer settings and tools on your phone and web browser. Setup developer accounts on Facebook and Twitter and see what they will let you do. Part of being a developer is poking around. Don't worry if you don't get anywhere with it. It's about familiarising yourself with data and how it is structured, as well as the tools that are available to manipulate it.
</p>
</li>
</ul>

:ET